var gulp = require('gulp')
  , Stream = require('stream').Stream
  , Promise = require('promise')


module.exports = {

	// name , doBefore , fn
	task : function( name , doBefore , fn ){
		

		if( !Array.isArray( doBefore ) )
			doBefore = [ doBefore ]

		if( fn )
			doBefore.push( fn )

		var doBeforeFn = [];
		for( var i=0;i<doBefore.length;i++){

			doBeforeFn[ i ] = []

			if( !Array.isArray( doBefore[ i ] ) )
				doBefore[ i ] = [doBefore[ i ]]

			for(var j=0;j<doBefore[i].length;j++){
				if( typeof doBefore[ i ][ j ] == 'function' )
					doBeforeFn[ i ][ j ] = doBefore[ i ][ j ]
				else
					if( !gulp.tasks[  doBefore[ i ][ j ] ] )
						return console.error( 'task  '+doBefore[ i ][ j ]+'  does not exists')
					else
						doBeforeFn[ i ][ j ] = gulp.tasks[  doBefore[ i ][ j ] ].fn
			}
		
		}

		var execChunk = function( i ){
			return function( value ){

				var ps = []

				for( var j=0;j<doBeforeFn[i].length;j++){

					var label = typeof doBefore[i][j] =='string' ? doBefore[i][j] : "anonym function"
					
					console.log("start "+label )
					var value = doBeforeFn[ i ][ j ]() 

					if( value instanceof Stream )
						value = value.toPromise()

					if( value instanceof Promise ){
						ps.push( value.then(function(){console.log("end "+label )}) )
					}else
						console.log("end "+label )
				}

				if( ps.length )
					return Promise.all( ps )
				else
					return
			}
		}

		gulp.add( name , null , function(){

			var p = new Promise(function(resolve){
				resolve();
			})

			for( var i=0;i<doBeforeFn.length;i++)
				p=p.then( execChunk(i) , null )

			p.then(null,function(e){
				console.error(e)
			})

			return p;

		})
	},
}